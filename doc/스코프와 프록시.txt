#스코프와 프록시

    이번에는 프록시 방식을 사용해본다.

    @Component
    @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
    public class MyLogger{
    }

    ProxyMode = ScopedProxyMode.TARGET_CLASS를 추가해주자.
        -적용 대상이 인터페이스가 아닌 클래스면 TARGET_CLASS를 선택
        -적용 대상이 인터페이스면 INTERFACES를 선택
    이렇게 하면 MyLogger의 가짜 프록시 클래스를 만들어두고 HTTP request와 상관 없이
    가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.

    가짜 프록시 객체는 요청이 오면 그 때 내부에서 진짜 빈을 요청하는 위임 로직이 들어있다.
    -이 가짜 프록시 빈은 내부에 실제 MyLogger의 참조를 갖고 있다.
    -클라이언트가 myLogger.logci()을 호출하면 사실은 가짜 프록시 객체의 메서드를 호출한 것이다.
    -가짜 프록시 객체는 내부에 진짜 myLogger를 찾는 방법을 알고 있다.
    -가짜 프록시 객체는 원본 클래스를 상속 받아서 만들어졌기 때문에 이 객체를 사용하는
    클라이언트 입장에서는 사실 원본인지 아닌지도 모르게, 동일하게 사용할 수 있다(다형성)

    "동작 정리"
    -CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
    -이 가짜 프록시 객체는 실제 요청이 오면 그 때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다.
    -가짜 프록시 객체는 실제 request scope와 관계 없다. 그냥 가짜고,
    내부에 단순한 위임 로직만 있고, 싱글톤 처럼 동작한다.

    "특징 정리"
    -프록시 객체로 인해 request scope를 싱글톤 빈 쓰듯 사용된다.
    -사실 Provider를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 지연한다는 점!!!!!
    -단지 애노테이션 설정 변경만으로 원본 객체를 프록시 객체로 대체할 수 있다.
    이것이 바로 다형성과 DI컨테이너가 가진큰 장점.
    -꼭 웹 스코프가 아니어도 프록시는 사용할 수 있다.

    "주의점"
    -마치 싱글톤을 사용하는 것 같지만 다르게 동작하기 때문에 결국 주의해서 사용해야 한다.
    -이런 특별한 scope는 꼭 필요한 곳에만 최소화해서 사용하자. 무분별하게 사용하면 유지, 보수가 어려워짐;