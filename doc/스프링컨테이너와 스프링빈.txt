#스프링 컨테이너 생성

스프링 컨테이너 생성되는 과정을 알아보자.
//스프링 컨테이너 생성
ApplicationContext applicationContext =
    new AnnotationConfigApplicationContext(AppConfig.class);

    -ApplicationContext를 스프링 컨테이너라 한다.
    -ApplicationContext는 인터페이스다.
    -이걸 구현한게 AnnotationConfigApplicationContext이다.
    -스프링 컨테이너는 XML을 기반으로 만들 수도 있고, 어노테이션 기반의 자바 설정 클래스로 만들 수 있다.
    (요즘엔 XML -> 어노테이션 기반으로 많이 사용한다)
    -직전에 AppConfig를 사용했던 방식이 에노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다.
    -자바 설정 클래스를 기반으로 스프링 컨테이너(ApplicationContext)를 만들어보자
        -new AnnotationConfigApplicationContext(AppConfig.class);
        -이 클래스는 ApplicationContext 인터페이스의 구현체이다.

    참고 : 더 정확히는 스프링 커네이너를 부를 때 BeanFactory, ApplicationContext로 구분해서 이야기한다.
    BeanFactory를 직접 사용하는 경우는 거의 없으므로 일반적으로 ApplicationCOntext를 스프링 컨테이너라 한다.

    스프링 컨테이너의 생성 과정

    1. 스프링 컨테이너 생성
    new AnnotationConfigApplicationContext(AppConfig.class)
    -> 스프링 컨테이너 생성

    스프링 컨테이너 내부에 스프링 빈 저장소가 생긴다
    빈 이름 - 빈 객체
    빈 이름 - 빈 객체
    빈 이름 - 빈 객체
    -스프링 컨테이너를 생성할 때는 구성 정보로 지정해줘야 한다.

    2. 스프링 빈 등록
    -AppConfg.class를 구성 정보로 지정했다. @Configuration과 @Bean 어노테이션을 이용했음
    스프링 빈 저장소에 저장
    - 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록한다.

    빈 이름
    빈 이름은 메서드 이름을 사용한다.
    빈 이름은 직접 부여할 수 있다.
    주의 : 빈 이름은 항상 다른 이름을 부여해야 한다.

    3. 스프링 빈 의존관계 설정 -준비
    스프링 빈 의존 관계 설정을 준비한다.
    4. 스프링 빈 의존관계 서정 -완료
    memberService -> memberRepository <- orderService ->discountPolicy
    -스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI)한다.
    -단순히 자바 코드를 호출하는 것 같지만...(진짜)
    차이가 있다. 이 차이는 뒤에 싱글톤 컨테이너에 설명한다.

    참고
    스프링은 빈을 생성하고, 의존관계를 주입하는 단계가 나뉘어져 있다. 그런데 이렇게 자바 코드로
    스프링 빈을 등록하면 생성자를 호출하면서 의존관계 주입도 한번에 처리된다. 여기서는 이해를 돕기 위해서
    개념적으로 나누어 설명했다. 자세한 내용은 의존관계 자동 주입에서 다시 설명하겠다.

    정리
    스프링 컨테이너를 생성하고, 설정(구성) 정보를 참고해서 스프링 빈도 등록하고, 의존관계도 설정했다.
    이제 스프링 컨테이너에서 데이터를 조회해보자.


#모든 빈 출력하기
    - 실행하면 스프링에 등록된 모든 빈 정보를 출력할 수 있다.
    - ac.getBeanDefinitionNames() : 스프링에 등록된 모든 빈 이름을 조회한다.
    - ac.getBean() : 빈 이름으로 빈 객체(인스턴스)를 조회한다.

#애플리케이션 빈 출력하기
    -스프링 내부에서 사용하는 빈은 제외하고, 내가 등록한 빈만 출력해보자.
    -스프링이 내부에서 사용하는 빈은 getRole()로 구분할 수 있다.
            > ROLE_APPLICATION : 일반적으로 사용자가 정의한 빈
            > ROLE_INFRASTRUCTURE : 스프링이 내부에서 사용하는 빈















