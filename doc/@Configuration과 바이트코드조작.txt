# @Configuration과 바이트코드 조작의 마법
    스프링 컨테이너는 싱글톤 레지스트리다.
    따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 한다.
    그런데 스프링이 자바 코드까지 어떻게 하기는 어렵다.
    AppConifg memberRepository 3번 호출됐어야 하는데.. 이상하게 딱 1번 호출됐다.
    @Configuration적용한 AppConfig에 비밀이 있다!

    예상과는 다르게 클래스 명에 xxxCGLIB가 붙으면서 상당히 복잡해졌다. 이것은 내가 만든 클래스가 아니라
    스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고,
    그 다른 클래스를 스프링 빈으로 등록한 것이다.

    -> 그 임의의 다른 클래스가 바로 싱글톤이 보장되도록 해준다.
    아마도 다음과 같이 바이트 코드를 조작해서 작성되어 잇을 것이다.
    (실제로는 CGLIB의 내부 기술을 사용하는데 매우 복잡하다)

    "AppConfig@CGLIB 예상 코드"
    @Bean
    public MemberRepository memberRepository(){
        if(memoryMemberRepository가 이미 스프링 컨테이너에 등록되어 있으면?){
            return 스프링 컨테이너에서 찾아서 반환함.
        } else {
            기존 로직을 호출해서 MemoryMemberRepository를 생성하고 스프링 컨테이너에 등록
            return 반환
        }
    }

    -@Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면
    생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
    -덕분에 싱글톤이 보장되는 것이다.

        참고 : AppConfig@CGLIB는 AppConfig의 자식 타입이므로, AppConfig타입으로 조회할 수 있다.

#만약 @Configuration을 적용하지 않고, @Bean만 적용하면 어떻게 될까?
    @Configuration을 붙이면 바이크도를 조작하는 CGLIB 기술을사용해서 싱글톤을 보장하지만,
    만약 @Bean만 적용하면 어떻게 될까?

    call AppConfig.memberService
    call AppConfig.memberRepository
    call AppConfig.memberRepository
    call AppConfig.orderService
    call AppConfig.memberRepository
    bean.getClass() = class hello.core.AppConfig
    싱글톤 깨짐. 순수한 자바코드가 그냥 도네~! @Configuration 어노테이션 기능을 알았따!

    "인스턴스가 같은지 테스트 해보면?"
    -> 세 개 모두 다른 객체를 만들어서 사용하게 됨.
    스프링 컨테이너가 관리하지 않음. 그냥 new해서 넣은 것과 같음!

    "정리"
    @Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
        -memberRepository()처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지 않는다.
    -크게 고민할 것 없다. 스프링 설정 정보는 @Configuration을 사용하자