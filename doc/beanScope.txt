# 빈 스코프란?
    지금까지 우리는 스프링 빈이 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될 때 까지 유지된다고 학습했다.
    이것은 스프링 빈이 기본적으로 싱글톤 스코프로 생성되기 때문이다. 스코프는 번역 그대로 빈이 존재할 수 있는 범위를 뜻 한다.

    스프링은 다음과 가은 다양한 스코프를 지원한다.
    "싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다."
    "프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고
    더는 관리하지 않는 매우 짧은 범위의 스코프이다."

   @Scope("prototype")
   @Component
   puublic class HelloBean()

   @Scope("prototype")
   @Bean
   ProtoTypeBean HelloBean(){
    return new HelloBean();
   }

   스프링 컨테이너가 요청할 때 만들어줘. 의존관계 주입해서 초기화까지 해줘.
   그리고 거기서 끝. 스프링 컨테이너가 더 이상 관리하지 않음. 1회용같은 느낌인 듯.

   "웹 관련 스코프"
    "request" : 웹 요청이 들어오고 나갈 때 까지 유지되는 스코프이다.
    "session" : 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
    "application" : 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프이다.

    -> 싱글톤, 프로토타입, request정도만 알면 좋을 것 같다.

    @Scope("prototype")
    프로토타입 읏코프
    싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환한다. 반면에 프로토타입 스코프를 스프링 컨테이너에 조회하면
    스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.

    프토토타입 빈 요청
    클라이언트A가 컨테이너에 요청 protoypeBean요청 그러면 그 때 새로운 빈 생성 + DI해서 반환. 관리 X.
    클라이언트B가 요청? 또 새롭게 빈 만들고 반화하고 끝
    클라이언트C가 요청? 또 새롭게 만들어서 반환하고 끝!

    "정리"
    스프링 컨테이너는 프로토타입 빈을 생성학, 의존관계 주입, 초기화까지만 처리한다는 것! 관리x
    그러면 이 빈을 관리할 책임은 프로토 타입 빈을 받은 클라이언테으게 있다. 그래서
    @PrDestroy같은 종료 메서드가 호출되지 않는다.

    -싱글톤 빈은 스프링 컨테이너 생성 시점에 초기화 메서드가 실행 되지만,
    프로토 타입 스코프의 빈은 스프링 컨테이너에서 빈을 조회할 때 생성되고, 초기화 메서드도 실행된다.
    -프로토타입 빈을 2번 조회했으므로 완전 다른 스프링 빈 생성되고, 초기화도 2번 됐다.
    -싱글톤 빈은 스프링 컨테이너가 관리하기 때문에 스프링 컨테이너가 종료될 때 빈의 종료 메서드가 실행되지만,
    프로토타입 빈은 생성, 의존관계 주입, 초기화까지만 관여하고 더는 관리하지 않는다.
    따라서 프로토타입 빈은 스프링 컨테이너가 종료될 때 @PreDestory같은 종료 메서드가 전혀 실행되지 않는다.

    "프로토 타입 빈의 특징 정리"
    -스프링 컨테이너가 요청할 때 마다 새로 생성된다.
    - 스프링 컨테이너는 프로토타입인의 생성과 의존관계 주입 그리고 초기화까지만 관여한다.
    -종료 메서드가 호출되지 않는다.
    -그래서 프로토타입 빈은 프로토타입 빈을 조회한 클라이언트가 관리해야 한다.
    종료 메서드에 대한 호출도 클라이언트가 직접 해야한다.


    문제! 싱글톤 빈과 같이 사용할 때는 의도한 대로 잘 동작하지 않으므로 주의해야 한다!

    스프링은 일반적으로 싱글톤 빈을 사용하므로, 싱글톤 빈이 프로토타입 빈을 사용하게 된다.
    그런데 싱글톤 빈은 생성 시점에만 의존관계 주입을 받기 때문에, 프로토타입 빈이 새로 생성되긴 하지만,
    싱글톤 빈과 함께 계속 유지된다!! scope.SingletonWithPrototypeTest1을 참고해라.

    아마 원하는 것은 이런 것이 아닐 것. 프로토타입 왜 써...
    프로토타입 빈을 주입 시점에만 새로 생성하는 것이 아니라, 사용할 때 마다 새로 생성해서 사용하는 것을 원하 ㄹ것!

    참고 : 여러 빈에서 같은 프로토타입 빈을 주입 받으면, "주입 받는 시점에 각각 새로운 프로토타입 빈이 생성"된다.
    예를 들어
        clientA, clientB가 각각 의존관계 주입을 받으면 각각 다른 인스턴스의 프로토타입 빈을 주입 받는다.
    clientA -> prototypeBean@x01
    clientB -> prototypeBean@x02
    물론 사용할 때 마다 새로 생성되는 것은 아니다.

    이 문제 해결?? Provider로 문제 해결!
    가장 간단한 방법은 싱글톤 빈이 새로 사용할 때 마다 스프링 컨테이너에 새로 요청하는 것

    이렇게 직접 의존관계 필요한 거 직접 찾는 거 ? DL(Dependency Lookup)이라고 함.
    그런데 이렇게 스프링의 애플리케이션 컨테스트 전체를 주입받게 되면, 컨테이너 종속적인 코드가 되고,
    단위 테스트도 어려워진다.
    지금 필요한 기능은 지정한 프로토타입 빈을 컨테이너에서 대신 찾아주는 대신 딱 DL정도의 기능만 제공하는 무언가가 있었으면...

    ObjectFactory, ObjectProvider
    지정한 빈을 대신 찾아주는 DL 서비스를 제공!

            @Autowired
            private ObjectProvider<PrototypeBean> prototypeBeansProvider;

            public int logic(){
                PrototypeBean prototypeBean = prototypeBeansProvider.getObject();
                prototypeBean.addCount();
                return prototypeBean.getCount();
            }

            ObjectProvider, ObjectFactory 둘다 똑같은 역할 중...


            -실행해보면 prototypeBeanProvider.getObject()을 통해서 항상 새로운 프로토타입 빈이 생성되는 것 확이 ㄴ가능
            ObjectProvider의 getObject()를 호출하면 내부에서 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다. DL
            스프링이 제공하는 기능을 사용하지만, 기능이 단순하므로 단위테스틀 만들거나 mock코드를 훨씬 쉬워진다.
            ObjectProvider는 지금 딱 필요한 DL 정도의 기능만 제공한다!

            특징
            - ObjectFactory: 기능이 단순, 별도의 라이브러리 필요 없음. 스프링 의존
            - ObjectProvider: ObjectFactory 상속, 옵션, 스트림 처리 등 편의 기능이 많고, 별도의 라이브러리 필요 없음. 스프링 의존.

            ##JSR-330 Provider
            javax.inject.Provider라는 JSR-330 자바 표즌을 사용하는 방법이다.
            이 방법을 사용하려면 javax.inject:javax.inject:1 라이브러리를 gradle에 추가해야 한다.

            실행해보면 provider.get()을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
            provider의 get()을 호출하면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다(DL)
            자바 표준이고, 기능이 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.
            Provider는 지금 딱 필요한 DL 정도의 기능만 제공한다.

            특징!
            get()메서드 하나로 기능이 매우 단순.
            별도의 라이브러리 필요
            자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.

            "정리"
            -프로토타입 빈을 언제 사용할까? 매번 사용할 때 마다 의존관계 주입이 완료된 새ㅗㄹ운 객체가 필요하면 사용하면 된다.
            그런데 실무에서 웹 애플리케이션을 개발해보면, 싱글톤 빈으로 대부분 문제를 해결할 수 있어서
            프로토타입 빈을 직접적으로 사용하는 일은 매!우! 드물다.
            ObjectProvider, JSR0303 Provider등은 프로토타입 뿐만 아니라 DL이 필요한 경우 언제든 사용할 수 있다.

            참고 : 스프링이 제공하는 메서드 @Lookup 애노테이션을 사용하는 방법도 있지만,
            이전 방법들로 충분하고, 고려해야할 내용도 많아서 생략하겠다.

            참고 : 실무에서 자바 표준인 JSR-330 Provider를 사용할 것인지, 아니면 스프링이 제공하는
            ObjectProvider를 사용할 것인지 고민이 될 것. ObjectProvider는 DL을 위한 편의 기능을 많이 제공해주고 스프링 외에
            별도의 의존관계가 추가가 필요 없기 대문에 필요하다. 만약 코드를 스프링이 아닌 다른 컨테이너에서도 사용할 수 있어야 한다면
            JSR-330 Provider를 사용해야 한다.
            (근데 잘 없나봐)

            스프링을 사용하다 보면 이 기능 뿐만 아니라 다른 기능들도 자바 표준과 스프링이 제공하는 기능이 겹칠 때가 많다.
            대부분 스프링이 더 다양하고 편리한 기능을 제공해주기 때문에, 특별히 다른 컨테이너를 사용할 일이 없다면,
            스프링이 제공하는 기능을 사용하면 된다.
