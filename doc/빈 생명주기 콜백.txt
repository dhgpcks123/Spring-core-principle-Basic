# 빈 생명주기 콜백

빈 생명주기 콜백 시작
    데이터베이스 커넥션 풀이나, 네트워크 소켓처럼 애플리케이션 시작 시점에 필요한 연결을 미리 해두고, 애플리케이션 종료 시점에
    연결을 모두 종료하는 작업을 진행하려면, !객체의 초기화와 종료 작업이 필요하다!

    간단하게 외부 네트워크에 미리 연결하는 객체를 하나 생성한다고 가정해보자.
    실제로 네트워크에 연결하는 것은 아니고, 단순히 문자만 출력하도록 한다.
    이 NetworkClient는 애플리케이션 시작 시점에 connect()를 호출해서 연결을 맺어두어야 하고,
    애플리케이션이 종료되면 disConnect()를 호출해서 연결을 끊어야 한다.


    생성자 부분을 보면 url 정보 없이 connect가 호출되는 것을 확인할 수 있다.
    너무 당연한 이야기. url 업속, 객체 생성 후 수정자 주입을 통해
    setUrl()이 호출되어야 url이 존재.

    스프링 빈은 간단하게 다음과 같은 라이프사이클을 가진다.
    "객체 생성" -> "의존관계 주입"

    스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 필요한 데이터를 사용할 수 있는 준비가 완료된다.
    따라서 초기화 작업(값도 할당 되어야 초기화 된 것)은 의존관계 주입이 모두 완료되고 난 다음에 호출해야 한다.
    그런데 개발자가 의존관계 주입이 모두 완료된 시점을 어떻게 알 수 있을까?

    " 스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공"한다.
    또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다.
    따라서 안전하게 종료 작업을 진행할 수 있다.

    "스프링 빈의 이벤트 라이프사이클"
    "스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료"
    *생성자주입은 스프링 빈 생성 단계에서 이루어짐.

   초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
   소멸전 콜백 : 빈이 소멸되기 직전에 호출

   스프링은 다양한 방식으로 생명주기 콜백을 지원한다.

    참고 :
    어? 그냥 생성자 주입으로 다 하면 안되나요?
    - 객체의 생성과 초기화를 분리하자.
    생성자는 필수 정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다.
    반면에 초기화는 이렇게 생성된 값들을 활용해서 외부 커넥션을 연결하는 등 무거운 동작을 수행한다.
    따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 객체를 생성하는 부분과
    초기화 하는 부분을 명확하게 나누는 것이 유지보수 관점에서 좋다. 물론 초기화 작업이 내부 값들만 약반
    변경하는 정도로 단순한 경우에는 생성자에서 한번에 다 처리하는 게 더 나을 수 있다.